#
# https://github.com/actions/checkout/issues/1590#issuecomment-2567109195
#
# We manually start a container and execute scripts in it instead of using `jobs.build.container`,
# otherwise we couldn't use GitHub-provided actions (checkout, cache, etc.) as they rely on Node20
# which would not necessarily be available on some containers (e.g., Ubuntu 18.04).
#
# See: https://github.com/actions/checkout/issues/1590
#
# If you need to pass environment variables from the GitHub host runner to the Docker container,
# you can do so by adding `-e MY_VAR` to the docker run command, for example:
#
#    docker run --name build-container -d -e GITHUB_REPOSITORY -v ...
#
name: Action Build System
on: [push]
env:
  CONTAINER: ubuntu:20.04

jobs:
  linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4

    - name: Install Development Tools Packages
      env:
        SCRIPT: |
          # Add i386 architecture
          dpkg --add-architecture i386

          # Update repository
          apt-get update

          # Install build dependencies
          apt-get install sudo apt-get install -y gcc-multilib g++-multilib

    - name: Execute Build
      env:
        SCRIPT: |
          # Open makefile directory
          cd desktop/src

          # Make linux (Without post build script)
          make

          # Make dlls path
          mkdir -p cstrike/addons/spread

          echo "Checking files in workspace..."
          ls -laR ./Release
          ls -laR ./config
          ls -laR ./cstrike

          # Copy release file
          cp ./Release/spread_mm.so ./cstrike/addons/spread
          cp ./config/spread.cfg ./cstrike/addons/spread

      run: docker exec build-container bash -c "$SCRIPT"

    - name: Deploy artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux32
        path: ${{github.workspace}}/src/cstrike
        
  windows:
    name: Windows Build
    runs-on: windows-latest
  
    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Execute Build
      working-directory: ${{github.workspace}}
      run: |
        # Execute Build
        msbuild src\Spread.vcxproj -property:configuration=Release -nologo -verbosity:minimal

        # Make publish directory
        mkdir -p cstrike\addons\spread

        # Move released dll to publish
        copy src\build\release\bin\*.dll cstrike\addons\spread -Recurse -Force
        copy src\config\*.cfg cstrike\addons\spread -Recurse -Force

    - name: Deploy artifacts
      uses: actions/upload-artifact@v4
      with:
        name: win32
        path: ${{github.workspace}}/cstrike
